"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[285],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7294),r=n(4334),i="tabItem_Ymn6";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(3117),r=n(7294),i=n(4334),o=n(2389),l=n(7392),s=n(7094),c=n(2466),u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n,o=e.lazy,d=e.block,m=e.defaultValue,f=e.values,h=e.groupId,v=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,l.l)(k,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==y&&!k.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,s.U)(),N=T.tabGroupChoices,D=T.setTabGroupChoices,I=(0,r.useState)(y),E=I[0],C=I[1],O=[],w=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var j=N[h];null!=j&&j!==E&&k.some((function(e){return e.value===j}))&&C(j)}var S=function(e){var t=e.currentTarget,n=O.indexOf(t),a=k[n].value;a!==E&&(w(t),C(a),null!=h&&D(h,String(a)))},L=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=O.indexOf(e.currentTarget)+1;n=null!=(a=O[r])?a:O[0];break;case"ArrowLeft":var i,o=O.indexOf(e.currentTarget)-1;n=null!=(i=O[o])?i:O[O.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},v)},k.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return O.push(e)},onKeyDown:L,onFocus:S,onClick:S},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":E===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(b.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function m(e){var t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},1670:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return m}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),o=n(5488),l=n(5162),s=["components"],c={sidebar_position:6,title:"Draft\u62e6\u622a\u5668"},u=void 0,p={unversionedId:"jimmer-sql/mutation/interceptor",id:"jimmer-sql/mutation/interceptor",title:"Draft\u62e6\u622a\u5668",description:"The Draft interceptor works with the Save command to adjust the data before the object is saved.",source:"@site/docs/jimmer-sql/mutation/interceptor.mdx",sourceDirName:"jimmer-sql/mutation",slug:"/jimmer-sql/mutation/interceptor",permalink:"/jimmer/docs/jimmer-sql/mutation/interceptor",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-sql/mutation/interceptor.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Draft\u62e6\u622a\u5668"},sidebar:"tutorialSidebar",previous:{title:"Mutate middle table",permalink:"/jimmer/docs/jimmer-sql/mutation/association"},next:{title:"Support for Spring GraphQL",permalink:"/jimmer/docs/spring-graphql"}},d={},m=[{value:"Define the intercepted data format",id:"define-the-intercepted-data-format",level:2},{value:"Define the interceptor",id:"define-the-interceptor",level:2},{value:"Configure the interceptor",id:"configure-the-interceptor",level:2},{value:"Usage",id:"usage",level:2}],f={toc:m};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Draft interceptor works with the ",(0,i.kt)("a",{parentName:"p",href:"./save-command"},"Save command")," to adjust the data before the object is saved."),(0,i.kt)("h2",{id:"define-the-intercepted-data-format"},"Define the intercepted data format"),(0,i.kt)("p",null,"If most entity tables have ",(0,i.kt)("inlineCode",{parentName:"p"},"created_time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"modified_time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"created_by")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"modified_by")," fields, developer can provide the following superclass."),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// highlight-next-line\n@MappedSuperclass\npublic interface BaseEntity {\n\n    LocalDateTime createdTime();\n\n    LocalDateTime modifiedTime();\n\n    @ManyToOne\n    @OnDissociate(DissociateAction.SET_NULL)\n    User creator();\n\n    @ManyToOne\n    @OnDissociate(DissociateAction.SET_NULL)\n    User editor();\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// highlight-next-line\n@MappedSuperclass\ninterface BaseEntity {\n\n    val createdTime: LocalDateTime\n\n    val modifiedTime: LocalDateTime\n\n    @ManyToOne\n    @OnDissociate(DissociateAction.SET_NULL)\n    val creator: User\n\n    @ManyToOne\n    @OnDissociate(DissociateAction.SET_NULL)\n    val editor: User\n}\n")))),(0,i.kt)("p",null,"All entities that need these fields can derive from this superclass."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@OnDissociate(DissociateAction.SET_NULL)")," here is to prevent the deletion of related ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," data from being blocked due to these two foreign keys. These two foreign keys are automatically cleared when the related ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," is deleted.")),(0,i.kt)("h2",{id:"define-the-interceptor"},"Define the interceptor"),(0,i.kt)("p",null,"Suppose there is a service class called ",(0,i.kt)("inlineCode",{parentName:"p"},"UserService")," whose java method ",(0,i.kt)("inlineCode",{parentName:"p"},"getCurrentUserId()")," or kotlin property ",(0,i.kt)("inlineCode",{parentName:"p"},"currentUserId")," returns the id of the currently logged in user."),(0,i.kt)("p",null,"The interceptor must implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.DraftInterceptor")," interface. If using Spring hosting, the code is as follows:"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Component\npublic class BaseEntityDraftInterceptor implements DraftInterceptor<BaseEntityDraft> {\n\n    private final UserService userService;\n\n    public BaseEntityDraftInterceptor(UserService userService) {\n        this.userService = userService;\n    }\n\n    @Override\n    public void beforeSave(BaseEntityDraft draft, boolean isNew) {\n        if (!ImmutableObjects.isLoaded(draft, BaseEntityProps.MODIFIED_TIME)) {\n            draft.setModifiedTime(LocalDateTime.now());\n        }\n        if (!ImmutableObjects.isLoaded(draft, BaseEntityProps.EDITOR)) {\n            draft.setEditor(editor - > {\n                editor.setId(userService.getCurrentUserId());\n            });\n        }\n        if (isNew) {\n            if (!ImmutableObjects.isLoaded(draft, BaseEntityProps.CREATED_TIME)) {\n                draft.setCreatedTime(LocalDateTime.now());\n            }\n            if (!ImmutableObjects.isLoaded(draft, BaseEntityProps.CREATOR)) {\n                draft.setCreator(creator - > {\n                    creator.setId(userService.getCurrentUserId());\n                });\n            }   \n        }\n    }\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Component\nclass BaseEntityDraftInterceptor(\n    private val userService: UserService\n) : DraftInterceptor<BaseEntityDraft> {\n\n    override fun beforeSave(draft: BaseEntityDraft, isNew: Boolean) {\n        if (!isLoaded(draft, BaseEntity::modifiedTime)) {\n            draft.modifiedTime = LocalDateTime.now()\n        }\n        if (!isLoaded(draft, BaseEntity::editor)) {\n            draft.editor().apply {\n                id = userService.currentUserId\n            }\n        }\n        if (isNew) {\n            if (!isLoaded(draft, BaseEntity::createdTime)) {\n                draft.createdTime = LocalDateTime.now()\n            }\n            if (!isLoaded(draft, BaseEntity::creator)) {\n                draft.creator().apply {\n                    id = userService.currentUserId\n                }\n            }\n        }\n    }\n}\n")))),(0,i.kt)("p",null,"Among them, the ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeSave")," method is called before an object is saved, and the user can make final adjustments to the data to be saved."),(0,i.kt)("p",null,"If the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"isNew")," is true, it means that the later operation is an insert operation; otherwise, it is an update operation."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Please do not modify properties decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@Id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@Key")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeSave")," method.")),(0,i.kt)("h2",{id:"configure-the-interceptor"},"Configure the interceptor"),(0,i.kt)("p",null,"Hook the interceptor on the SqlClient object to take effect"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic JSqlClient sqlClient(\n    List<DraftInterceptor<?>> interceptors,\n    ...omitting other parameters...\n) {\n    return JSqlClient\n        .newBuilder()\n        // highlight-next-line\n        .addDraftinterceptors(interceptors)\n        ...omit other configuration...\n        .build();\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Bean\nfun sqlClient(\n    interceptors: List<DraftInterceptor<?>>,\n    ...omitting other parameters...\n): KSqlClient =\n    newKSqlClient {\n        // highlight-next-line\n        addDraftinterceptors(interceptors)\n        ...omit other configuration...\n    }\n")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Although only one ",(0,i.kt)("inlineCode",{parentName:"p"},"DraftInterceptor")," is demonstrated in this article, there may be many in actual projects."),(0,i.kt)("p",{parentName:"admonition"},"So, here we use collections and let Spring inject all ",(0,i.kt)("inlineCode",{parentName:"p"},"DraftInterceptor")," objects.")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," inherits ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseEntity"),", you can use it like this"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'Book book = BookDraft.$.produce(draft -> {\n    draft.setName("SQL in Action");\n    draft.setEdition(1);\n    draft.setPrice(new BigDecimal("59"));\n    draft.setStore(store -> store.setId(2L));\n});\nsqlClient.getEntities().save(book);\n'))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val book = new(Book::class).by {\n    name = "SQL in Action"\n    edition = 1\n    price = BigDecimal("59")\n    store().id = 2\n}\nsqlClient.entities.save(book)\n')))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the above save command eventually results in an insert operation, the generated SQL is as follows"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"insert into BOOK(\n    /* highlight-start */\n    CREATED_TIME,\n    MODIFIED_TIME,\n    CREATOR_ID,\n    EDITOR_ID,\n    /* highlight-end */\n    NAME, \n    EDITION, \n    PRICE, \n    STORE_ID\n) values(\n    /* highlight-next-line */\n    ?, ?, ?, ?,\n    ?, ?, ?, ?\n)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the above save command eventually results in an update operation, the generated SQL is as follows"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"update BOOK set \n    /* highlight-start */\n    MODIFIED_TIME = ?,\n    EDITOR_ID = ?,\n    /* highlight-end */\n    PRICE = ?, \n    STORE_ID = ? \nwhere ID = ?\n")))),(0,i.kt)("p",null,"We see that although the user does not specify values for the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"createdTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"creator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"editor")," of the saved object, ",(0,i.kt)("inlineCode",{parentName:"p"},"DraftIntercetor")," sets values for these missing properties."))}h.isMDXComponent=!0}}]);