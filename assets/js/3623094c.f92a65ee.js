"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[7309],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,h=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(7294),a=t(4334),i="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return m}});var r=t(3117),a=t(7294),i=t(4334),o=t(2389),l=t(7392),u=t(7094),s=t(2466),c="tabList__CuJ",d="tabItem_LNqP";function p(e){var n,t,o=e.lazy,p=e.block,m=e.defaultValue,h=e.values,f=e.groupId,g=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=h?h:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,l.l)(y,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===m?m:null!=(n=null!=m?m:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:b[0].props.value;if(null!==k&&!y.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,u.U)(),C=w.tabGroupChoices,N=w.setTabGroupChoices,j=(0,a.useState)(k),x=j[0],T=j[1],O=[],R=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var E=C[f];null!=E&&E!==x&&y.some((function(e){return e.value===E}))&&T(E)}var P=function(e){var n=e.currentTarget,t=O.indexOf(n),r=y[t].value;r!==x&&(R(n),T(r),null!=f&&N(f,String(r)))},I=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,a=O.indexOf(e.currentTarget)+1;t=null!=(r=O[a])?r:O[0];break;case"ArrowLeft":var i,o=O.indexOf(e.currentTarget)-1;t=null!=(i=O[o])?i:O[O.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":p},g)},y.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:function(e){return O.push(e)},onKeyDown:I,onFocus:P,onClick:P},o,{className:(0,i.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":x===n})}),null!=t?t:n)}))),o?(0,a.cloneElement)(b.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function m(e){var n=(0,o.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},9220:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return m}});var r=t(3117),a=t(102),i=(t(7294),t(3905)),o=t(5488),l=t(5162),u=["components"],s={sidebar_position:9,title:"Agreement with developers"},c=void 0,d={unversionedId:"agreement",id:"agreement",title:"Agreement with developers",description:"Chain programming style is a common design in Java library API design.",source:"@site/docs/agreement.mdx",sourceDirName:".",slug:"/agreement",permalink:"/jimmer/docs/agreement",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/agreement.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Agreement with developers"},sidebar:"tutorialSidebar",previous:{title:"Demos",permalink:"/jimmer/docs/demo"},next:{title:"Discuss",permalink:"/jimmer/docs/discuss"}},p={},m=[],h={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,u);return(0,i.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Chain programming style is a common design in Java library API design."),(0,i.kt)("p",null,"There are two motivations for the chained API design:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new object without modifying the current object. Commonly seen with immutable objects such as ",(0,i.kt)("inlineCode",{parentName:"p"},"String")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"String value = \" Hello world  \"\n    .trim() // \u03b1\n    .toUpperCase() // \u03b2\n    .replace(' ', '-'); // \u03b3\n")),(0,i.kt)("p",{parentName:"li"},"In the example, the three method calls at ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b2")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b3")," do not modify the current string, but create a new string."),(0,i.kt)("p",{parentName:"li"}," For this usage, the chained API itself is the design goal. The user must pay attention to the return value of each call, discarding the return value makes the method call meaningless.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Modifies the current object and returns the current object itself. Common with mutable objects such as ",(0,i.kt)("inlineCode",{parentName:"p"},"StringBuilder")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'StringBuilder value = new StringBuilder()\n    .append("Hello ") // \u03b1\n    .append(\' \') // \u03b2\n    .append(System.getProperty("user")); // \u03b3\n')),(0,i.kt)("p",{parentName:"li"},"In the example, the three method calls at ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b2")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b3")," all return the current object itself, never create a new object, and the code operates on the same ",(0,i.kt)("inlineCode",{parentName:"p"},"StringBuilder")," object from beginning to end."),(0,i.kt)("p",{parentName:"li"}," For this usage, the chained API is not a design goal in itself, it's just to simplify the code. For its return value, it doesn't matter whether the user chooses to use or discard it."),(0,i.kt)("p",{parentName:"li"}," :::note\nThis design motivation is to address a small flaw in Java's expressiveness, a trick that is not needed in more modern languages.\n:::"))),(0,i.kt)("p",null,"The chain API with the same style corresponds to two completely different design motives, and correspond to completely different understanding and usage."),(0,i.kt)("p",null,"Except for the popular base types such as ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"StringBuilder"),", for most frameworks, what kind of motivation a chained API corresponds to often becomes part of the user's learning cost. Even, sometimes it becomes a source of confusion. For example ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javaee/7/api/javax/persistence/criteria/Predicate.html#not--"},"JPA Criteria's Predicate.not method"),", from the documentation, its design motivation should be ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),", but cannot prevent some JPA venders implement it as ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,i.kt)("p",null,"Jimmer does not want to make identifying the design motivation of a chained API part of the learning cost for users, and defines two annotations."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"@org.babyfish.jimmer.lang.NewChain")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"@org.babyfish.jimmer.lang.OldChain"))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The RetentionPolicy of these two annotations is SOURCE, which does not affect the bytecode and reflection behavior, only as part of the function signature."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"@NewChain corresponds to motivation 1, indicating that the current chain API always creates new objects without modifying the current object."),(0,i.kt)("li",{parentName:"ul"},"@OldChian corresponds to motivation 2, saying that the current chain API always modifies and returns the current object, without creating a new one."))),(0,i.kt)("p",null,"Take the two interfaces of the jimmer-sql subproject as an example"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MutableQuery.java"',title:'"MutableQuery.java"'},"package org.babyfish.jimmer.sql.ast.query;\n\nimport org.babyfish.jimmer.lang.OldChain;\n\npublic interface MutableRootQuery<T extends Table<?>> \n    extends MutableQuery, RootSelectable<T> {\n\n    // highlight-next-line\n    @OldChain\n    MutableRootQuery<T> where(\n        Predicate... predicates\n    );\n\n    // highlight-next-line\n    @OldChain\n    @Override\n    default MutableRootQuery<T> orderBy(\n        Expression<?> expression\n    );\n\n    // highlight-next-line\n    @OldChain\n    default MutableRootQuery<T> orderBy(\n        Expression<?> expression, \n        OrderMode orderMode\n    );\n\n    // highlight-next-line\n    @OldChain\n    MutableRootQuery<T> orderBy(\n        Expression<?> expression, \n        OrderMode orderMode, \n        NullOrderMode nullOrderMode\n    );\n\n    // highlight-next-line\n    @OldChain\n    MutableRootQuery<T> groupBy(\n        Expression<?>... expressions\n    );\n\n    // highlight-next-line\n    @OldChain\n    MutableRootQuery<T> having(\n        Predicate... predicates\n    );\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("p",null,"Kotlin doesn't need to use chained API design tricks, so kotlin API won't use ",(0,i.kt)("inlineCode",{parentName:"p"},"@OldChain")))),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="ConfigurableRootQuery.java"',title:'"ConfigurableRootQuery.java"'},"package org.babyfish.jimmer.sql.ast.query;\n\nimport org.babyfish.jimmer.lang.NewChain;\nimport java.util.function.BiFunction;\n\npublic interface ConfigurableRootQuery<T extends Table<?>, R> \n    extends RootQuery<R> {\n\n    // highlight-next-line\n    @NewChain\n    <X> ConfigurableRootQuery<T, X> reselect(\n            BiFunction<\n                MutableRootQuery<T>, \n                T, \n                ConfigurableRootQuery<T, X>\n            > block\n    );\n\n    // highlight-next-line\n    @NewChain\n    ConfigurableRootQuery<T, R> distinct();\n\n    // highlight-next-line\n    @NewChain\n    ConfigurableRootQuery<T, R> limit(int limit, int offset);\n\n    // highlight-next-line\n    @NewChain\n    ConfigurableRootQuery<T, R> withoutSortingAndPaging();\n\n    // highlight-next-line\n    @NewChain\n    ConfigurableRootQuery<T, R> forUpdate();\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"package org.babyfish.jimmer.sql.kt.ast.query\n\nimport org.babyfish.jimmer.lang.NewChain\n\ninterface KConfigurableRootQuery<E: Any, R> : KRootQuery<R> {\n\n    // highlight-next-line\n    @NewChain\n    fun <X> reselect(\n        block: KMutableRootQuery<E>.() -> KConfigurableRootQuery<E, X>\n    ): KConfigurableRootQuery<E, X>\n\n    // highlight-next-line\n    @NewChain\n    fun distinct(): KConfigurableRootQuery<E, R>\n\n    // highlight-next-line\n    @NewChain\n    fun limit(limit: Int, offset: Int): KConfigurableRootQuery<E, R>\n\n    // highlight-next-line\n    @NewChain\n    fun withoutSortingAndPaging(): KConfigurableRootQuery<E, R>\n\n    // highlight-next-line\n    @NewChain\n    fun forUpdate(): KConfigurableRootQuery<E, R>\n}\n")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Jimmer's chained API will frequently use these two annotations. After understanding this convention, there is no learning cost in this regard.")))}f.isMDXComponent=!0}}]);