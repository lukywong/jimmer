"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[3036],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return l}});var r=n(7294),a=n(4334),o="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var r=n(3117),a=n(7294),o=n(4334),l=n(2389),i=n(7392),c=n(7094),s=n(2466),u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n,l=e.lazy,d=e.block,m=e.defaultValue,k=e.values,h=e.groupId,f=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=k?k:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,i.l)(v,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:g[0].props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var C=(0,c.U)(),N=C.tabGroupChoices,B=C.setTabGroupChoices,S=(0,a.useState)(y),T=S[0],w=S[1],P=[],q=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var j=N[h];null!=j&&j!==T&&v.some((function(e){return e.value===j}))&&w(j)}var R=function(e){var t=e.currentTarget,n=P.indexOf(t),r=v[n].value;r!==T&&(q(t),w(r),null!=h&&B(h,String(r)))},x=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r,a=P.indexOf(e.currentTarget)+1;n=null!=(r=P[a])?r:P[0];break;case"ArrowLeft":var o,l=P.indexOf(e.currentTarget)-1;n=null!=(o=P[l])?o:P[P.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},f)},v.map((function(e){var t=e.value,n=e.label,l=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return P.push(e)},onKeyDown:x,onFocus:R,onClick:R},l,{className:(0,o.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),l?(0,a.cloneElement)(g.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function m(e){var t=(0,l.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},4782:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),l=n(5488),i=n(5162),c=["components"],s={sidebar_position:8,title:"Calculated property and its cache"},u=void 0,p={unversionedId:"jimmer-sql/query/calculated-prop",id:"jimmer-sql/query/calculated-prop",title:"Calculated property and its cache",description:"Calculated property",source:"@site/docs/jimmer-sql/query/calculated-prop.mdx",sourceDirName:"jimmer-sql/query",slug:"/jimmer-sql/query/calculated-prop",permalink:"/jimmer/docs/jimmer-sql/query/calculated-prop",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer/tree/main/doc/docs/jimmer-sql/query/calculated-prop.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Calculated property and its cache"},sidebar:"tutorialSidebar",previous:{title:"External Cache",permalink:"/jimmer/docs/jimmer-sql/query/cache"},next:{title:"Gobal Filter",permalink:"/jimmer/docs/jimmer-sql/query/filter"}},d={},m=[{value:"Calculated property",id:"calculated-property",level:2},{value:"The cache of calculated property.",id:"the-cache-of-calculated-property",level:2},{value:"Configure cache",id:"configure-cache",level:3},{value:"Ensure data consistency",id:"ensure-data-consistency",level:3},{value:"Experience data consistency",id:"experience-data-consistency",level:3},{value:"1. Modify price",id:"1-modify-price",level:4},{value:"2. Modify foreign key",id:"2-modify-foreign-key",level:4}],k={toc:m};function h(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"calculated-property"},"Calculated property"),(0,o.kt)("p",null,"The annotation ",(0,o.kt)("inlineCode",{parentName:"p"},"@Transient")," can accept parameters, such as"),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'time="BookStore.java"',time:'"BookStore.java"'},"@Entity\npublic interface BookStore {\n\n    @Transient(BookStoreAvgPriceResolver.class)\n    BigDecimal avgPrice();\n\n    ...omit other code...\n}\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'time="BookStore.kt"',time:'"BookStore.kt"'},"@Entity\ninterface BookStore {\n\n    @Transient(BookStoreAvgPriceResolver::class)\n    val avgPrice: BigDecimal\n\n    ...omit other code...\n}\n")))),(0,o.kt)("p",null,"Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"BookStoreAvgPriceResolver")," is a user-defined class that calculates the average price of all books in the bookstore."),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreAvgPriceResolver.java"',title:'"BookStoreAvgPriceResolver.java"'},"public class BookStoreAvgPriceResolver\n    implements TransientResolver<Long, BigDecimal> {\n\n    private final JSqlClient sqlClient;\n\n    public BookStoreAvgPriceResolver(JSqlClient sqlClient) {\n        this.sqlClient = sqlClient;\n    }\n\n    @Override\n    public Map<Long, BigDecimal> resolve(\n        Collection<Long> ids,\n        Connection con\n    ) {\n        BookTable book = BookTable.$;\n        \n        List<Tuple2<Long, BigDecimal>> tuples = sqlClient\n            .createQuery(book)\n            .where(book.store().id().in(ids))\n            .groupBy(book.store().id())\n            .select(\n                book.store().id(),\n                book.price().avg()\n            )\n            .execute(con); // Important to specify connection\n        return Tuple2.toMap(tuples);\n    }\n}\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreAvgPriceResolver.kt"',title:'"BookStoreAvgPriceResolver.kt"'},"class BookStoreAvgPriceResolver(\n    private val sqlClient: KSqlClient\n) : KTransientResolver<Long, BigDecimal> {\n\n    override fun resolve(\n        ids: Collection<Long>,\n        con: Connection\n    ): Map<Long, BigDecimal> =\n        sqlClient\n            .createQuery(Book::class) {\n                where(table.store.id valueIn ids)\n                groupBy(table.store.id)\n                select(\n                    table.store.id,\n                    avg(table.price).asNonNull()\n                )\n            }\n            .execute(con) // It's important to specify the connection\n            .associateBy({\n                it._1\n            }) {\n                it._2\n            }\n}\n")))),(0,o.kt)("p",null,"For this calculation rule implementation class, the convention is as follows:"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null),(0,o.kt)("th",null,"Java"),(0,o.kt)("th",null,"Kotlin"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("b",null,"Super interface")),(0,o.kt)("td",null,"org.babyfish.jimmer.sql.TransientResolver"),(0,o.kt)("td",null,"org.babyfish.jimmer.sql.kt.KTransientResolver")),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("b",null,"Optional constructor parameter")),(0,o.kt)("td",null,"org.babyfish.jimmer.sql.JSqlClient"),(0,o.kt)("td",null,"org.babyfish.jimmer.sql.kt.KSqlClient")))),(0,o.kt)("p",null,"So, we can get the average price of all the books in the bookstore via ",(0,o.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice"),"."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Calculated properties can only be retrieved through ",(0,o.kt)("inlineCode",{parentName:"p"},"Object Fetcher")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQL"),", not as normal SQL expressions.")),(0,o.kt)("h2",{id:"the-cache-of-calculated-property"},"The cache of calculated property."),(0,o.kt)("p",null,"In the article ",(0,o.kt)("a",{parentName:"p",href:"./cache"},"External Cache"),", we did not cover the cache of calculated properties. Because computed properties introduce developer-defined computing rules, developers are required to help the framework ensure its data consistency."),(0,o.kt)("p",null,"Example"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"key"),(0,o.kt)("th",{parentName:"tr",align:null},"value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"BookStore.avgPrice-1"),(0,o.kt)("td",{parentName:"tr",align:null},"80.333333333333")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"BookStore.avgPrice-2"),(0,o.kt)("td",{parentName:"tr",align:null},"58.500000000000")))),(0,o.kt)("h3",{id:"configure-cache"},"Configure cache"),(0,o.kt)("p",null,"Taking implicit cache configuration as an example, the code to configure cache for calculated property is as follows"),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic JSqlClient sqlClient(\n    RedisTemplate<String, byte[]> redisTemplate\n) {\n    return JSqlClient\n        .newBuilder()\n        .setCaches(it -> {\n            setCacheFactory(\n                new Class[] {\n                    BookStore.class,\n                    Book.class,\n                    Author.class,\n                    TreeNode.class\n                },\n                return new CacheFactory() {\n\n                    // Create cache for calculated properties, including:\n                    // `BookStore.avgPrice`\n                    @Override\n                    // highlight-next-line\n                    public Cache<?, List<?>> createResolverCache(ImmutableProp prop) {\n                        return new ChainCacheBuilder<Object, List<?>>()\n                                .add(\n                                    new CaffeineBinder<>(\n                                        1024, \n                                        Duration.ofSeconds(1)\n                                    )\n                                )\n                                .add(\n                                    new RedisBinder<>(\n                                        redisTemplate, \n                                        prop, \n                                        Duration.ofHours(1)\n                                    )\n                                )\n                                .build();\n                    }\n\n                    ... omit other caches ...\n                }\n            );\n        })\n        ...omit other configuration...\n        .build()\n}\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Bean\nfun sqlClient(\n    redisTemplate: RedisTemplate<String, ByteArray>\n): KSqlClient =\n    newKSqlClient {\n        setCaches {\n            setCacheFactory(\n                arrayOf(\n                    BookStore.class,\n                    Book.class,\n                    Author.class,\n                    TreeNode.class\n                ),\n                object : CacheFactory {\n\n                    // Create cache for calculated properties, including:\n                    // `BookStore.avgPrice`\n                    // highlight-next-line\n                    override fun createResolverCache(prop: ImmutableProp): Cache<*, *>? =\n                        ChainCacheBuilder<Any, List<*>>()\n                            .add(\n                                CaffeineBinder(\n                                    1024, \n                                    Duration.ofSeconds(1)\n                                )\n                            )\n                            .add(\n                                RedisBinder(\n                                    redisTemplate, \n                                    prop, \n                                    Duration.ofHours(1)\n                                )\n                            )\n                            .build()\n\n                    ... omit other caches ...\n                }\n            )\n        }\n\n        ...omit other configuration...\n    }\n")))),(0,o.kt)("h3",{id:"ensure-data-consistency"},"Ensure data consistency"),(0,o.kt)("p",null,"To ensure the consistency of the computed property cache, triggers needs to be added to the constructor of ",(0,o.kt)("inlineCode",{parentName:"p"},"BookStoreAvgPriceResolver"),"."),(0,o.kt)("p",null,"According to the calculation rules of ",(0,o.kt)("inlineCode",{parentName:"p"},"Book.avgPrice"),", the following two cases need to delete the cache"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"When the foreign key ",(0,o.kt)("inlineCode",{parentName:"li"},"Book.store")," is modified"),(0,o.kt)("li",{parentName:"ol"},"When the price of the book is revised")),(0,o.kt)("p",null,"code show as below"),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreAvgPriceResolver.java"',title:'"BookStoreAvgPriceResolver.java"'},"public class BookStoreAvgPriceResolver \nimplements TransientResolver<Long, BigDecimal> {\n\n    private final JSqlClient sqlClient;\n\n    public BookStoreAvgPriceResolver(JSqlClient sqlClient) {\n        this.sqlClient = sqlClient;\n\n        // 1. Check whether the association `BookStore.books` is changed\n        sqlClient.getTriggers().addAssociationListener(\n            BookStoreProps.BOOKS, // \u03b1\n            e -> {\n                sqlClient\n                    .getCaches()\n                    .getPropertyCache(BookStoreProps.AVG_PRICE)\n                    .delete(e.getSourceId()); // \u03b2\n            }\n        );\n        sqlClient.getTriggers().addEntityListener(\n            Book.class, // \u03b3\n            e -> {\n                Ref<BookStore> storeRef = // \u03b4\n                    e.getUnchangedFieldRef(BookProps.STORE);\n                if (storeRef != null && storeRef.getValue() != null) { // \u03b5\n                    // 2, Otherwise, check whether `Book.price` is changed\n                    if (e.getUnchangedFieldRef(BookProps.PRICE) == null) { // \u03b6\n                        sqlClient\n                            .getCaches()\n                            .getPropertyCache(BookStoreProps.AVG_PRICE)\n                            .delete(storeRef.getValue().id()); // \u03b7\n                    }\n                }\n            }\n        );\n    }\n\n    @Override\n    public Map<Long, BigDecimal> resolve(\n            Collection<Long> ids, \n            Connection con\n    ) {\n        ...omit calculation code...\n    }\n}\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreAvgPriceResolver.kt"',title:'"BookStoreAvgPriceResolver.kt"'},"class BookStoreAvgPriceResolver(\n    private val sqlClient: KSqlClient\n) : KTransientResolver<Long, BigDecimal> {\n\n    init {\n        // 1. Check whether the association `BookStore.books` is changed.\n        sqlClient\n            .triggers\n            .addAssociationListener(BookStore::books) { // \u03b1\n                sqlClient\n                    .caches\n                    .getPropertyCache<Any, Any>(BookStore::avgPrice) \n                    ?.delete(it.sourceId) // \u03b2\n            }\n\n        sqlClient.triggers.addEntityListener(Book::class) { // \u03b3\n            val storeId = \n                it \n                    .getUnchangedFieldRef<BookStore>(Book::store) // \u03b4\n                    ?.value // \u03b5\n                    ?.id\n            if (storeId !== null) {\n                // 2. Otherwise, check whether `Book.price` is changed.\n                if (it.getUnchangedFieldRef<BigDecimal>(Book::price) === null) { // \u03b6\n                    sqlClient\n                        .caches\n                        .getPropertyCache<Any, Any>(\n                            BookStore::avgPrice\n                        )\n                        ?.delete(storeId) // \u03b7\n                }\n            }\n        }\n    }\n\n    override fun resolve(\n        ids: Collection<Long>,\n        con: Connection\n    ): Map<Long, BigDecimal> =\n        ... omit calculation code ...\n}\n")))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Handling modification of foreign keys of book"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u03b1: Listen for changes in one-to-many association ",(0,o.kt)("inlineCode",{parentName:"li"},"BookStore.books")),(0,o.kt)("li",{parentName:"ul"},"\u03b2: Remove calculated property cache ",(0,o.kt)("inlineCode",{parentName:"li"},"BookStore.avgPrice")," of ",(0,o.kt)("inlineCode",{parentName:"li"},"BookStore")," objects whose ",(0,o.kt)("inlineCode",{parentName:"li"},"BookStore.books")," has changed"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Handling modification of price of book"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u03b3: Listen for changes to the entity ",(0,o.kt)("inlineCode",{parentName:"li"},"Book")),(0,o.kt)("li",{parentName:"ul"},"\u03b4: if the foreign key of the book has not changed, continue execution"),(0,o.kt)("li",{parentName:"ul"},"\u03b5: If the unchanged foreign key is not null, continue execution"),(0,o.kt)("li",{parentName:"ul"},"\u03b6: If the price is modified, continue execution"),(0,o.kt)("li",{parentName:"ul"},"\u03b7: Clean up the calculated property cache ",(0,o.kt)("inlineCode",{parentName:"li"},"BookStore.avgPrice")," of the parent object referenced by the foreign key ",(0,o.kt)("inlineCode",{parentName:"li"},"BookStore.store"))))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The above code uses a special method ",(0,o.kt)("inlineCode",{parentName:"p"},"getUnchangedFieldRef"),". Specify a property, and if the object property has not been modified, create a wrapper for the unchanged value and return it."),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For insert operation\nReturns a wrapper whose internal value is the value of the specified field in the inserted object")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For delete operation\nReturns a wrapper whose internal value is the value of the specified field in the deleted object")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For update operation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"if the specific field is changed, return null"),(0,o.kt)("li",{parentName:"ul"},"If the specific field is not changed, returns a wrapper, the internal value is the unchanged value of the specific field in the old and new objects")))),(0,o.kt)("p",{parentName:"admonition"},"Notice:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"- If the wrapper itself is null, it means that the field has been changed, so the unchangd value cannot be obtained.\n- If the internal value of wrapper is null, it means that the field has not been modified, but the unchanged value is null.\n"))),(0,o.kt)("h3",{id:"experience-data-consistency"},"Experience data consistency"),(0,o.kt)("h4",{id:"1-modify-price"},"1. Modify price"),(0,o.kt)("p",null,"Execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"update book set price = price + 2 where id = 1;\n")),(0,o.kt)("p",null,"Assuming the foreign key is 1, the log print result is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"delete from redis: [Book-1]\n#highlight-next-line\ndelete from redis: [BookStore.avgPrice-1]\n")),(0,o.kt)("h4",{id:"2-modify-foreign-key"},"2. Modify foreign key"),(0,o.kt)("p",null,"Execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"update book set store_id = 2 where id = 4\n")),(0,o.kt)("p",null,"Assuming that the foreign key before modification is 1, the log print result is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"delete from redis: [Book-1]\ndelete from redis: [BookStore.books-1]\ndelete from redis: [BookStore.books-2]\ndelete from redis: [Book.store-1]\n# highlight-start\ndelete from redis: [BookStore.avgPrice-1]\ndelete from redis: [BookStore.avgPrice-2]\n# highlight-end\n")))}h.isMDXComponent=!0}}]);